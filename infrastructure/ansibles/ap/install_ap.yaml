---
- name: Install AP on Ubuntu
  hosts: "{{ target_hosts }}"
  become: true
  vars:
    file_max_value: 64000
    nfs_user_password: "Admin$$123"
  tasks:
    # Set system configuration
    - name: Update sysctl.conf to make changes persistent (fs.file-max)
      lineinfile:
        path: /etc/sysctl.conf
        line: "fs.file-max={{ file_max_value }}"
        state: present
      become: true

    - name: Load sysctl settings from the file
      command: sysctl --system
      changed_when: false
      become: true

    # Install JDK
    - name: Install OpenJDK
      apt:
        name: openjdk-{{ jdk_version }}-jdk
        state: present

    - name: Set openjdk version variable
      become: true
      shell: java -version
      register: java_version

    - name: Print java version
      debug: 
        var: java_version

    - name: Ensure /opt directory exists
      file:
        path: /opt
        state: directory

    - name: Ensure /opt/tmp directory exists
      file:
        path: /opt/tmp
        state: directory

    - name: Ensure /opt/tomcat directory exists
      file:
        path: /opt/tomcat
        state: directory

    # Install Tomcat
    - name: For security purposes, Tomcat should run under a separate, unprivileged user. Create tomcat user.
      shell: |
          id -u tomcat || sudo useradd -m -d /opt/tomcat -U -s /bin/false tomcat
      become: true

    - name: Download Apache Tomcat {{tomcat_sub_version}}
      get_url:
        url: "https://archive.apache.org/dist/tomcat/tomcat-{{tomcat_major_version}}/v{{tomcat_sub_version}}/bin/apache-tomcat-{{tomcat_sub_version}}.tar.gz"
        dest: "/opt/tmp/apache-tomcat-{{tomcat_sub_version}}.tar.gz"
        mode: '0644'

    - name: Extract Tomcat archive to /opt/tomcat
      unarchive:
        src: "/opt/tmp/apache-tomcat-{{tomcat_sub_version}}.tar.gz"
        dest: "/opt/tomcat"
        remote_src: yes
        extra_opts: ["--strip-components=1"]

    - name: Set ownership of tomcat directory to tomcat & system user
      file:
        path: /opt/tomcat/
        state: directory
        owner: tomcat
        group: "{{ ansible_user_group }}"
        recurse: yes

    - name: Ensure execution permissions for Tomcat scripts
      file:
        path: /opt/tomcat/bin
        state: directory
        mode: '0755'
        recurse: yes

    - name: Add user details for gaining manager and host manager access in tomcat-users.xml
      blockinfile:
        path: /opt/tomcat/conf/tomcat-users.xml
        insertbefore: "</tomcat-users>"
        marker: "<!-- ANSIBLE MANAGED BLOCK -->"
        block: |
          <role rolename="manager-gui" />
          <user username="manager" password="{{manager_password}}" roles="manager-gui" />
          <role rolename="admin-gui" />
          <user username="admin" password="{{admin_password}}" roles="manager-gui,admin-gui" />

    #- name: Ensure the RemoteAddrValve is commented out to remove the restriction for the Manager page 1
    #  replace:
    #    path: /opt/tomcat/webapps/manager/META-INF/context.xml
    #    regexp: '(<Valve className="org.apache.catalina.valves.RemoteAddrValve")'
    #    replace: |
    #      <!-- \1

    #- name: Ensure the RemoteAddrValve is commented out to remove the restriction for the Manager page 2
    #  replace:
    #    path: /opt/tomcat/webapps/manager/META-INF/context.xml
    #    regexp: '(allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" />)'
    #    replace: |
    #      \1 -->

    - name: Create tomcat service unit file
      template:
        src: tomcat.service.template
        dest: /etc/systemd/system/tomcat.service

    - name: Reload system services
      command: systemctl daemon-reload

    #- name: Check UFW status
    #  command: ufw status
    #  register: ufw_status
    #  changed_when: false  # Avoid unnecessary task changes

    #- name: Allow Tomcat port (8080) in UFW
    #  command: ufw allow 8080

    #- name: Ensure UFW is enabled in configuration
    #  lineinfile:
    #    path: /etc/ufw/ufw.conf
    #    regexp: '^ENABLED='
    #    line: 'ENABLED=yes'
    #    backup: yes

    #- name: Reload UFW
    #  command: ufw reload

    # Enable iptables and allow application Ports
    - name: Install iptables and iptables-persistent
      apt:
        name:
          - iptables
          - iptables-persistent
        state: present
        update_cache: yes

    - name: Allow SSH (port 22)
      ansible.builtin.command: iptables -A INPUT -p tcp --dport 22 -j ACCEPT

    - name: Allow SSH (port 7022)
      ansible.builtin.command: iptables -A INPUT -p tcp --dport 7022 -j ACCEPT

    - name: Allow HTTP
      ansible.builtin.command: iptables -A INPUT -p tcp --dport 8080 -j ACCEPT

    - name: Allow established and related connections
      ansible.builtin.command: >
        iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    - name: Drop all other incoming traffic
      ansible.builtin.command: iptables -P INPUT DROP

    - name: Save iptables rules
      ansible.builtin.command: netfilter-persistent save

    - name: Start tomcat service
      systemd:
        name: tomcat
        enabled: yes
        state: started

    - name: Enable tomcat service
      shell: systemctl enable tomcat

    # Install Oxalis
    - name: Create .oxalis home directory and files
      copy:
        src: .oxalis/
        dest: /opt/.oxalis/
        owner: tomcat
        group: "{{ ansible_user_group }}"
        mode: "0755"
      become: true

    - name: Delete oxalis.conf file
      file:
        path: /opt/.oxalis/oxalis.config
        state: absent
        
    - name: Create oxalis.conf file
      blockinfile:
        path: /opt/.oxalis/oxalis.conf
        create: yes
        block: |
           oxalis.keystore {
                # Relative to OXALIS_HOME
                path="settings/{{ap_certificate_name}}"
                password={{ap_certificate_password}}
                key.alias=cert
                key.password={{ap_certificate_password}}
            }

            # Where to store inbound files
            oxalis.path.inbound="inbound"
 
            oxalis.logging.config="settings/logback-oxalis-app.xml"
          
 
    - name: Set nfs_folder_name to {{nfs_folder}} in move-inbound-files.sh file
      replace:
        path: /opt/.oxalis/move-inbound-files.sh
        regexp: 'nfs_folder_name'
        replace: '{{nfs_folder}}'


    - name: Set nfs_folder_name to {{nfs_folder_secondary}} in move-inbound-files.sh file
      replace:
        path: /opt/.oxalis/move-inbound-files.sh
        regexp: 'nfs_folder_secondary_name'
        replace: '{{nfs_folder_secondary}}'
      when: nfs_folder_secondary is defined and nfs_folder_secondary | length > 0
                     
    - name: Delete {{nfs_folder}}.cred file
      file:
        path: /opt/.oxalis/{{nfs_folder}}.cred
        state: absent
        
    - name: Create {{nfs_folder}}.cred file - {{nfs_user_password}}
      blockinfile:
        path: /opt/.oxalis/{{nfs_folder}}.cred
        create: yes
        block: |
          user={{nfs_user}}
          password={{nfs_user_password}}
          domain={{nfs_user_domain}}
          
    - name: Ensure /opt/.oxalis/{{nfs_folder}} directory exists. For NFS mounting.
      file:
        path: /opt/.oxalis/{{nfs_folder}}
        state: directory
        
    - name: Delete {{nfs_folder_secondary}}.cred file
      file:
        path: /opt/.oxalis/{{nfs_folder_secondary}}.cred
        state: absent
      when: nfs_folder_secondary is defined and nfs_folder_secondary | length > 0
        
    - name: Create {{nfs_folder_secondary}}.cred file - {{nfs_user_password}}
      blockinfile:
        path: /opt/.oxalis/{{nfs_folder_secondary}}.cred
        create: yes
        block: |
          user={{nfs_user}}
          password={{nfs_user_password}}
          domain={{nfs_user_domain}}
      when: nfs_folder_secondary is defined and nfs_folder_secondary | length > 0
          
    - name: Ensure /opt/.oxalis/{{nfs_folder_secondary}} directory exists. For NFS mounting.
      file:
        path: /opt/.oxalis/{{nfs_folder_secondary}}
        state: directory
      when: nfs_folder_secondary is defined and nfs_folder_secondary | length > 0
        
    - name: Ensure /opt/.oxalis/tmp directory exists.
      file:
        path: /opt/.oxalis/tmp
        state: directory
    
    - name: Install cifs-utils
      apt:
        name: cifs-utils
        state: present
        update_cache: yes
        
    - name: Add NFS mounting {{nfs_folder}} in /etc/fstab file.
      blockinfile:
        path: /etc/fstab
        state: present
        marker: "## ANSIBLE MANAGED BLOCK "
        block: |
          //{{nfs_server}}/{{nfs_folder}} /opt/.oxalis/{{nfs_folder}} cifs uid=0,credentials=/opt/.oxalis/{{nfs_folder}}.cred,iocharset=utf8,noperm 0 0

    - name: Add NFS mounting {{nfs_folder_secondary}} in /etc/fstab file.
      blockinfile:
        path: /etc/fstab
        state: present
        marker: "## ANSIBLE MANAGED BLOCK "
        block: |
          //{{nfs_server_secondary}}/{{nfs_folder_secondary}} /opt/.oxalis/{{nfs_folder_secondary}} cifs uid=0,credentials=/opt/.oxalis/{{nfs_folder_secondary}}.cred,iocharset=utf8,noperm 0 0
      when: nfs_folder_secondary is defined and nfs_folder_secondary | length > 0
          
    - name: Stop oxalis-inbound service
      command: systemctl stop oxalis-inbound

    - name: Mount network file store
      command: mount -a

    - name: Create oxalis-inbound service unit file
      template:
        src: oxalis-inbound.service.template
        dest: /etc/systemd/system/oxalis-inbound.service

    - name: Reload system services
      command: systemctl daemon-reload

    - name: Start oxalis-inbound service
      systemd:
        name: oxalis-inbound
        enabled: yes
        state: started

    - name: Enable oxalis-inbound service
      shell: systemctl enable oxalis-inbound

    - name: Copy oxalis inbound source files to Tomcat webapps directory
      copy:
        src: oxalis-{{ oxalis_version }}.war
        dest: /opt/tomcat/webapps/oxalis.war
        owner: tomcat
        group: "{{ ansible_user_group }}"
        mode: "0770"
        
    - name: Pause to debug or verify before next change
      pause:
        seconds: 15

    - name: Set ownership of tomcat directory to tomcat & system user
      file:
        path: /opt/tomcat/
        state: directory
        owner: tomcat
        group: "{{ ansible_user_group }}"
        recurse: yes

    - name: Set ownership of oxalis directory to tomcat & system user
      file:
        path: /opt/.oxalis/
        state: directory
        owner: tomcat
        group: "{{ ansible_user_group }}"
        recurse: yes

    - name: Add dns mapping in server.xml
      blockinfile:
        path: /opt/tomcat/conf/server.xml
        insertbefore: "<Host name="
        marker: "<!-- ANSIBLE MANAGED BLOCK -->"
        block: |
          <Host name="{{ ap_serverdomain }}" appBase="webapps" unpackWARs="true" autoDeploy="true">
              <Context path="" docBase="oxalis" />
              <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                    prefix="ap_access_log" suffix=".txt"
                    pattern="%h %l %u %t &quot;%r&quot; %s %b" />
          </Host>
          
    - name: Restart tomcat services
      command: systemctl restart tomcat
      
      
